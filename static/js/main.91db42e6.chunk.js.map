{"version":3,"sources":["components/Advantages/Advantages.tsx","components/Demo/Demo.tsx","components/Footer/Footer.tsx","components/Navbar/Navbar.tsx","components/Terminal/Terminal.tsx","components/Heading/Heading.tsx","serviceWorker.ts","index.tsx","App.tsx"],"names":["Advantages","react_default","a","createElement","className","Container","Row","Col","xs","sm","src","alt","offset","size","role","aria-label","Demo","lg","href","title","target","Button","color","tag","Footer","Navbar","_useState","useState","_useState2","Object","slicedToArray","state","setState","es_Navbar","light","expand","fixed","NavbarBrand","NavbarToggler","onClick","Collapse","isOpen","navbar","Nav","NavItem","NavLink","Terminal","props","children","Heading","Navbar_Navbar","Terminal_Terminal_Terminal","Boolean","window","location","hostname","match","ReactDOM","render","Fragment","Heading_Heading_Heading","Advantages_Advantages_Advantages","Demo_Demo_Demo","Footer_Footer_Footer","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.91db42e6.chunk.js","sourcesContent":["import React, { FC } from 'react';\nimport { Col, Container, Row } from 'reactstrap';\nimport './Advantages.scss';\n\nexport const Advantages: FC = () => {\n  return (\n    <div className=\"section section--spacing advantages\">\n      <Container className=\"text-center\">\n        <h2>Why do you want to use it?</h2>\n        <Row className=\"align-items-center advantage\">\n          <Col xs=\"12\" sm=\"3\">\n            <img src=\"/img/lock.svg\" alt=\"Secure\" />\n          </Col>\n          <Col xs=\"12\" sm={{ offset: 1, size: 8 }}>\n            <h3>Secure</h3>\n            <p>\n              You don't even need the Internet connection to generate an invoice, also it doesn't gather any\n              informations about you. It's an Open Source software which means, you can check the source to be sure that\n              it's safe.\n            </p>\n          </Col>\n        </Row>\n        <Row className=\"align-items-center advantage\">\n          <Col xs=\"12\" sm=\"8\">\n            <h3>CLI tool</h3>\n            <p>\n              If you are a geek like me, it's definitelly something for you! Terminal applications don't have to follow\n              the stereotypes about beeing ugly and having almost no positive user experience. This one is beautifull\n              and what's most important has emojis{' '}\n              <span role=\"img\" aria-label=\"hearth\">\n                ❤️\n              </span>\n              .\n            </p>\n          </Col>\n          <Col xs=\"12\" sm={{ offset: 1, size: 3 }}>\n            <img src=\"/img/terminal.svg\" alt=\"Terminal\" />\n          </Col>\n        </Row>\n        <Row className=\"align-items-center advantage\">\n          <Col xs=\"12\" sm=\"3\">\n            <img src=\"/img/number.svg\" alt=\"Autonumeration\" />\n          </Col>\n          <Col xs=\"12\" sm={{ offset: 1, size: 8 }}>\n            <h3>Autonumeration</h3>\n            <p>\n              You don't have to remember your last invoice number - it remembers it for you and sets as a default number\n              when generating new one. Easy and simple. But you don't need to use the suggestet one, it's always up to\n              you what number it will be.\n            </p>\n          </Col>\n        </Row>\n        <Row className=\"align-items-center advantage\">\n          <Col xs=\"12\" sm=\"8\">\n            <h3>Templating</h3>\n            <p>\n              The most annoying thing in creating invoices is filling the companies data. You are always wondering if\n              you don't made any mistake especially if the amount and bank account are proper :). What's more, when you\n              issue the same invoice every month it's better to have a template and change only the data - smart!\n            </p>\n          </Col>\n          <Col xs=\"12\" sm={{ offset: 1, size: 3 }}>\n            <img src=\"/img/template.svg\" alt=\"Templating\" />\n          </Col>\n        </Row>\n      </Container>\n    </div>\n  );\n};\n","import React, { FC } from 'react';\nimport { Button, Col, Container, Row } from 'reactstrap';\nimport './Demo.scss';\n\nexport const Demo: FC = () => {\n  return (\n    <div className=\"section section--spacing d-flex justify-content-center demo\">\n      <Container>\n        <Row className=\"align-items-center\">\n          <Col xs=\"12\" sm=\"6\" lg={{ offset: 1, size: 4 }} className=\"text-center\">\n            <h2>Generate a PDF</h2>\n            <p>\n              It uses{' '}\n              <a href=\"https://getbootstrap.com\" title=\"Bootstrap\" target=\"blank\">\n                Bootstrap\n              </a>{' '}\n              as a template which makes invoices clean, nice and simple. Interactive wizard guides you step by step\n              asking for necessary informations, making this process easy and fast.\n            </p>\n          </Col>\n          <Col xs=\"12\" sm=\"6\" lg={{ offset: 1, size: 6 }} className=\"text-center\">\n            <img className=\"demo__gif\" src=\"/img/demo.gif\" alt=\"Demo\" />\n          </Col>\n        </Row>\n        <div className=\"text-center\">\n          <Button color=\"warning\" size=\"lg\" href=\"/pdf/Quinvoice.pdf\" target=\"blank\" tag=\"a\">\n            Open example PDF\n          </Button>\n        </div>\n      </Container>\n    </div>\n  );\n};\n","import React, { FC } from 'react';\nimport './Footer.scss';\n\nexport const Footer: FC = () => {\n  return (\n    <div className=\"footer text-center\">\n      Made with{' '}\n      <span role=\"img\" aria-label=\"hearth\">\n        ❤️\n      </span>\n      as an Open Source by Szymon Piecuch 2019\n    </div>\n  );\n};\n","import React, { FC, useState } from 'react';\nimport { Collapse, Nav, Navbar as BootstrapNavbar, NavbarBrand, NavbarToggler, NavItem, NavLink } from 'reactstrap';\n\nexport const Navbar: FC = () => {\n  const [state, setState] = useState<boolean>(false);\n\n  const toggle = () => setState(!state);\n\n  return (\n    <BootstrapNavbar color=\"white\" light={true} expand=\"md\" fixed=\"top\">\n      <NavbarBrand href=\"/\">Quinvoice</NavbarBrand>\n      <NavbarToggler onClick={toggle} />\n      <Collapse isOpen={state} navbar={true}>\n        <Nav className=\"ml-auto\" navbar={true}>\n          <NavItem>\n            <NavLink href=\"https://www.npmjs.com/package/quinvoice\" target=\"blank\">\n              npm\n            </NavLink>\n          </NavItem>\n          <NavItem>\n            <NavLink href=\"https://github.com/qcumbeer/quinvoice\" target=\"blank\">\n              GitHub\n            </NavLink>\n          </NavItem>\n        </Nav>\n      </Collapse>\n    </BootstrapNavbar>\n  );\n};\n","import React, { FC, PropsWithChildren } from 'react';\nimport './Terminal.scss';\n\nexport const Terminal: FC<PropsWithChildren<{}>> = (props: PropsWithChildren<{}>) => {\n  return (\n    <div className=\"terminal\">\n      <div className=\"terminal--inner\">{props.children}</div>\n    </div>\n  );\n};\n","import React, { FC } from 'react';\nimport { Navbar } from '../Navbar/Navbar';\nimport { Terminal } from '../Terminal/Terminal';\nimport './Heading.scss';\n\nexport const Heading: FC = () => {\n  return (\n    <div className=\"section section--full heading d-flex\">\n      <Navbar />\n      <div className=\"heading--logo flex-grow-1 d-flex align-items-center justify-content-center\">\n        <img src=\"/img/calculator.svg\" alt=\"Quinvoice\" />\n      </div>\n      <div className=\"heading--slogan flex-grow-1 d-flex flex-column align-items-center justify-content-center\">\n        <h1>\n          The Queen\n          <br /> of Invoices\n        </h1>\n        <Terminal>npm i -G quinvoice</Terminal>\n      </div>\n    </div>\n  );\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\n//tslint:disable\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL((process as { env: { [key: string]: string } }).env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './App';\nimport './index.scss';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React, { FC } from 'react';\nimport { Advantages } from './components/Advantages/Advantages';\nimport { Demo } from './components/Demo/Demo';\nimport { Footer } from './components/Footer/Footer';\nimport { Heading } from './components/Heading/Heading';\n\nexport const App: FC = () => {\n  return (\n    <>\n      <Heading />\n      <Advantages />\n      <Demo />\n      <Footer />\n    </>\n  );\n};\n"],"sourceRoot":""}